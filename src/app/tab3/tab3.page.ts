import { Component, OnInit } from '@angular/core';
import { ResultadosService } from '../services/resultados.service';
import { ConcursantesService } from '../services/concursantes.service';

@Component({
  selector: 'app-tab3',
  templateUrl: 'tab3.page.html',
  styleUrls: ['tab3.page.scss'],
  standalone: false,
})
export class Tab3Page implements OnInit {
  evaluaciones: any[] = [];
  categorias: string[] = [];
  concursantes: any[] = [];
  categoriaSeleccionada: string = '';
  ordenSeleccionado: string = 'mayor';

  expandedConcursanteId: string | null = null;

  // Paginaci칩n
  currentPage: number = 1;
  itemsPerPage: number = 5;

  doRefresh(event: CustomEvent) {
    setTimeout(() => {
      this.ngOnInit();
      (event.target as HTMLIonRefresherElement).complete();
    }, 2000);
  }

  constructor(
    private resultadosService: ResultadosService,
    private concursantesService: ConcursantesService
  ) {}

  ngOnInit() {
    this.concursantesService.obtenerConcursantes().subscribe(concursantes => {
      this.concursantes = concursantes.map(concursante => ({
        ...concursante,
        totalPuntos: 0
      }));

      // 游댃 Suscribir cada concursante a su puntuaci칩n en tiempo real
      this.concursantes.forEach(concursante => {
        this.concursantesService.obtenerTotalPuntuacion(concursante.id).subscribe(total => {
          concursante.totalPuntos = total;
        });
      });
    });

    this.resultadosService.obtenerConcursantesEvaluados().subscribe(data => {
      this.evaluaciones = data;
      this.categorias = [...new Set(data.map(e => e.categoria))];
    });
  }

   // M칠todo para alternar la expansi칩n de un concursante
   toggleConcursanteExpanded(concursanteId: string) {
    if (this.expandedConcursanteId === concursanteId) {
      // Si ya est치 expandido, lo cerramos
      this.expandedConcursanteId = null;
    } else {
      // Si no est치 expandido, lo expandimos y cargamos la informaci칩n adicional
      this.expandedConcursanteId = concursanteId;
      this.cargarInformacionAdicional(concursanteId);
    }
  }

    // M칠todo para cargar la informaci칩n adicional del concursante
    cargarInformacionAdicional(concursanteId: string) {
      // Verificamos si ya tenemos la informaci칩n cargada
      const concursante = this.concursantes.find(c => c.id === concursanteId);

      // Si no tenemos los datos de integrantes o turno, los cargamos
      if (concursante && (!concursante.participantes
        || !concursante.turno)) {
        this.concursantesService.obtenerDetallesConcursante(concursanteId).subscribe(detalles => {
          // Actualizamos el concursante con la informaci칩n adicional
          const index = this.concursantes.findIndex(c => c.id === concursanteId);
          if (index !== -1) {
            this.concursantes[index] = {
              ...this.concursantes[index],
              participantes: detalles.participantes,
              turno: detalles.turno
              // A침ade aqu칤 m치s campos si lo necesitas
            };
          }
        });
      }
    }

  /** 游댳 Filtrar y ordenar concursantes seg칰n la selecci칩n del usuario */
  getConcursantesFiltrados() {
    let concursantesFiltrados = this.categoriaSeleccionada
      ? this.concursantes.filter(concursante => concursante.categoria === this.categoriaSeleccionada)
      : [...this.concursantes];

    // 游댳 Aplicar ordenaci칩n seg칰n la selecci칩n
    if (this.ordenSeleccionado === 'mayor') {
      concursantesFiltrados.sort((a, b) => b.totalPuntos - a.totalPuntos);
    } else if (this.ordenSeleccionado === 'menor') {
      concursantesFiltrados.sort((a, b) => a.totalPuntos - b.totalPuntos);
    }

    // 游댳 Concatenar la categor칤a solo si se selecciona "Todas"
    return concursantesFiltrados.map(concursante => ({
      ...concursante,
      nombre:
        this.categoriaSeleccionada === ''
          ? `${concursante.nombre} (${concursante.categoria})`
          : concursante.nombre
    }));
  }

  /** 游댳 Obtener concursantes para la p치gina actual */
  getConcursantesPaginados() {
    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    const endIndex = startIndex + this.itemsPerPage;
    return this.getConcursantesFiltrados().slice(startIndex, endIndex);
  }

  /** 游댳 Cambiar de p치gina */
  changePage(page: number) {
    this.currentPage = page;
  }

  /** 游댳 Obtener el n칰mero total de p치ginas */
  getTotalPages() {
    return Math.ceil(this.getConcursantesFiltrados().length / this.itemsPerPage);
  }
}
