import { ChangeDetectorRef, Component, inject } from '@angular/core';
import { Auth, signOut } from '@angular/fire/auth';
import { NavController } from '@ionic/angular';
import { ConcursantesService } from '../services/concursantes.service';
import { InteractionService } from '../services/interaction.service';

@Component({
  selector: 'app-tab2',
  templateUrl: 'tab2.page.html',
  styleUrls: ['tab2.page.scss'],
  standalone: false,
})
export class Tab2Page {
  private auth = inject(Auth);
  concursantes: any[] = [];
  concursanteSeleccionado: any = null;
  categoriaSeleccionada: string = '';
  observaciones: string = '';
  rubricaActual: any[] = [];
  promedio: number = 0;


  rubricas: Record<string, { nombre: string; puntuacion: number | null; descripcion: string }[]> = {
    'Talento Escenico': [
      { nombre: 'Manejo del escenario', puntuacion: null, descripcion: 'Eval√∫a la interacci√≥n con el espacio esc√©nico y la seguridad del concursante.' },
      { nombre: 'Expresi√≥n corporal', puntuacion: null, descripcion: 'Se mide la postura, movimientos y conexi√≥n con el p√∫blico.' },
      { nombre: 'Vestuario', puntuacion: null, descripcion: 'Se valora la est√©tica y creatividad en la vestimenta acorde a la presentaci√≥n.' },
      { nombre: 'Aceptaci√≥n del p√∫blico', puntuacion: null, descripcion: 'Capacidad del concursante para captar y cautivar al p√∫blico.' }
    ],
    'Talento Creativo': [
      { nombre: 'Creatividad', puntuacion: null, descripcion: 'Se eval√∫a la originalidad en la presentaci√≥n, uso del espacio y materiales.' },
      { nombre: 'Complejidad', puntuacion: null, descripcion: 'Nivel de dificultad t√©cnica y desarrollo de la presentaci√≥n.' },
      { nombre: 'Presentaci√≥n', puntuacion: null, descripcion: 'Se analiza la organizaci√≥n, coherencia y dominio del contenido.' },
      { nombre: 'Aceptaci√≥n del p√∫blico', puntuacion: null, descripcion: 'Impacto y conexi√≥n con la audiencia.' }
    ],
    'Otros Talentos': [
      { nombre: 'Presentaci√≥n', puntuacion: null, descripcion: 'Orden, coherencia y dominio de la presentaci√≥n.' },
      { nombre: 'Manejo esc√©nico', puntuacion: null, descripcion: 'Habilidad para interactuar con el escenario con seguridad.' },
      { nombre: 'Dominio, armon√≠a y t√©cnica', puntuacion: null, descripcion: 'Control, armon√≠a y ejecuci√≥n t√©cnica en la presentaci√≥n.' },
      { nombre: 'Aceptaci√≥n del p√∫blico', puntuacion: null, descripcion: 'Recepci√≥n y nivel de impacto en la audiencia.' }
    ],
    'Oficios': [
      { nombre: 'Presentaci√≥n', puntuacion: null, descripcion: 'Estructura organizada y clara de la presentaci√≥n.' },
      { nombre: 'Dominio del oficio', puntuacion: null, descripcion: 'Manejo experto y seguridad en la ejecuci√≥n.' },
      { nombre: 'Complejidad', puntuacion: null, descripcion: 'Nivel de dificultad de la actividad desempe√±ada.' },
      { nombre: 'Aceptaci√≥n del p√∫blico', puntuacion: null, descripcion: 'Reacci√≥n y participaci√≥n del p√∫blico.' }
    ],
    'Canto': [
      { nombre: 'T√©cnica vocal', puntuacion: null, descripcion: 'Dominio t√©cnico de la voz, respiraci√≥n y proyecci√≥n.' },
      { nombre: 'Afinaci√≥n', puntuacion: null, descripcion: 'Precisi√≥n en la entonaci√≥n y correcci√≥n mel√≥dica.' },
      { nombre: 'Interpretaci√≥n', puntuacion: null, descripcion: 'Expresi√≥n emocional y conexi√≥n con la letra de la canci√≥n.' },
      { nombre: 'Presencia esc√©nica', puntuacion: null, descripcion: 'Impacto visual y confianza sobre el escenario.' }
    ],
    'Coreograf√≠a': [
      { nombre: 'Coreograf√≠a', puntuacion: null, descripcion: 'Dise√±o del movimiento y t√©cnica de los bailarines.' },
      { nombre: 'Grado de Dificultad', puntuacion: null, descripcion: 'Complejidad y variedad en los movimientos.' },
      { nombre: 'Ritmo', puntuacion: null, descripcion: 'Coordinaci√≥n con la m√∫sica y precisi√≥n en la ejecuci√≥n.' },
      { nombre: 'Calidad interpretativa', puntuacion: null, descripcion: 'Integraci√≥n de expresi√≥n, movimientos y escenograf√≠a.' },
      { nombre: 'Vestuario', puntuacion: null, descripcion: 'Adecuaci√≥n del vestuario al estilo de baile.' }
    ],
    'Musico': [
      { nombre: 'T√©cnica instrumental', puntuacion: null, descripcion: 'Dominio y precisi√≥n en el uso del instrumento.' },
      { nombre: 'Afinaci√≥n', puntuacion: null, descripcion: 'Precisi√≥n en las notas y armonizaci√≥n con el conjunto.' },
      { nombre: 'Interpretaci√≥n', puntuacion: null, descripcion: 'Expresi√≥n art√≠stica y sentimiento en la ejecuci√≥n.' },
      { nombre: 'Presencia esc√©nica', puntuacion: null, descripcion: 'Seguridad y proyecci√≥n en el escenario.' }
    ]
  };

  constructor(
    private navCtrl: NavController,
    private concursantesService: ConcursantesService,
    private interactionService: InteractionService,
    private cdr: ChangeDetectorRef
  ) {}

  /** üîπ Cierra sesi√≥n del usuario */
  logout(): void {
    console.log("üîπ Intentando cerrar sesi√≥n...");
    signOut(this.auth)
      .then(() => {
        console.log('‚úÖ Sesi√≥n cerrada correctamente');
        this.navCtrl.navigateRoot('/login');
      })
      .catch(error => {
        console.error('‚ùå Error al cerrar sesi√≥n:', error);
      });
  }

  //** üîπ Obtiene los concursantes faltantes por evaluar al cargar la p√°gina */
  ngOnInit() {
    this.concursantesService.obtenerConcursantes().subscribe(data => {
      this.concursantes = data.filter(concursante => !concursante.evaluado);
      console.log("üìå Concursantes disponibles para evaluar:", this.concursantes);
      this.cdr.detectChanges();
    });
  }

/** üîπ Cargar la categor√≠a y la r√∫brica correspondiente */
cargarCategoriaYRubrica() {
  if (this.concursanteSeleccionado) {
    this.categoriaSeleccionada = this.concursanteSeleccionado.categoria.trim();

    // üîπ Normalizar la categor√≠a seleccionada (elimina tildes)
    const categoriaNormalizada = this.categoriaSeleccionada.normalize("NFD").replace(/[\u0300-\u036f]/g, "");

    // üîπ Crear un objeto de rubricas con claves normalizadas
    const rubricasNormalizadas = Object.keys(this.rubricas).reduce((acc, key) => {
      const keyNormalizada = key.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
      acc[keyNormalizada] = this.rubricas[key];
      return acc;
    }, {} as Record<string, any>);

    console.log("üìå Categor√≠a seleccionada:", this.categoriaSeleccionada);
    console.log("üìå Categor√≠a normalizada:", categoriaNormalizada);
    console.log("üìå Claves disponibles en rubricas:", Object.keys(rubricasNormalizadas));

    this.rubricaActual = rubricasNormalizadas[categoriaNormalizada]
      ? rubricasNormalizadas[categoriaNormalizada].map((aspecto: { nombre: string; puntuacion: number | null; descripcion: string }) => ({ nombre: aspecto.nombre, puntuacion: aspecto.puntuacion, descripcion: aspecto.descripcion }))
      : [];

    console.log("üìå R√∫brica cargada:", this.rubricaActual);
    this.cdr.detectChanges();
  } else {
    console.warn("‚ö†Ô∏è No se ha seleccionado ning√∫n concursante.");
    this.categoriaSeleccionada = '';
    this.rubricaActual = [];
  }
}




  /** üîπ Guardar la evaluaci√≥n en Firebase */
  async guardarEvaluacion() {
    if (!this.concursanteSeleccionado) {
      alert('‚ö†Ô∏è Debes seleccionar un concursante antes de guardar.');
      return;
    }

    if (this.rubricaActual.length === 0) {
      alert('‚ö†Ô∏è No hay una r√∫brica disponible para esta categor√≠a.');
      return;
    }

    if (this.rubricaActual.some(aspecto => aspecto.puntuacion === null)) {
      alert('‚ö†Ô∏è Debes evaluar todos los aspectos antes de guardar.');
      return;
    }

    // üîπ Calcular el promedio de la evaluaci√≥n
    const totalPuntos = this.rubricaActual.reduce((sum, aspecto) => sum + (aspecto.puntuacion ?? 0), 0);

    const evaluacion = {
      concursante: this.concursanteSeleccionado.nombre,
      categoria: this.categoriaSeleccionada,
      // aspectos: this.rubricaActual,
      totalPuntos: totalPuntos,
      observaciones: this.observaciones,
      fecha: new Date()
    };

    try {
      await this.concursantesService.guardarEvaluacion(evaluacion);

      // üîπ Actualizar el estado del concursante en Firebase
      await this.concursantesService.actualizarConcursante(this.concursanteSeleccionado.id);

      alert('‚úÖ Evaluaci√≥n guardada correctamente.');

      // üîπ Eliminar al concursante de la lista en la UI
      this.concursantes = this.concursantes.filter(c => c !== this.concursanteSeleccionado);

      // üîπ Limpiar valores despu√©s de guardar
      this.concursanteSeleccionado = null;
      this.categoriaSeleccionada = '';
      this.rubricaActual = [];
      this.observaciones = '';
      

      this.cdr.detectChanges();
    } catch (error) {
      console.error("‚ùå Error al guardar la evaluaci√≥n:", error);
      alert("‚ùå Ocurri√≥ un error al guardar la evaluaci√≥n.");
    }
  }

}
